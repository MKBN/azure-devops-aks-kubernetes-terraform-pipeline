trigger:
- master

pool:
  vmImage: ubuntu-latest

# Define Variables for Environment
variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa

stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJon
        continueOnError: false
        steps:
          - task: PublishPipelineArtifact@1
            displayName: Publish Artifacts
            inputs:
             targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
             artifact: 'terraform-manifests-out'
             publishLocation: 'pipeline'
          - task: TerraformInstaller@0
            displayName: Terraform install
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: Terraform init
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
              backendType: 'azurerm'
              backendServiceArm: 'terraform-aks-azurerm-svc-con'
              backendAzureRmResourceGroupName: 'terraform-storage-rg'
              backendAzureRmStorageAccountName: 'mkbnstorage1234'
              backendAzureRmContainerName: 'tfstatefiles'
              backendAzureRmKey: 'aks-base.tfstate'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            displayName: Terraform Validate
            inputs:
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
              allowTelemetryCollection: false

  - stage: DeployAKSCluster
    jobs:
      - deployment: DeployDevAKSCluster
        displayName: DeployDevAKSCluster
        pool:
         vmImage: 'ubuntu-latest'
        environment: $(DEV_ENVIRONMENT)
        strategy:
          runOnce:
            deploy:
              steps:
              - task: DownloadSecureFile@1
                displayName: Download ssh key 
                name: sshkey
                inputs:
                  secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
              - task: TerraformCLI@0
                displayName: Terraform Init
                inputs:
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  backendType: 'azurerm'
                  backendServiceArm: 'terraform-aks-azurerm-svc-con'
                  backendAzureRmResourceGroupName: 'terraform-storage-rg'
                  backendAzureRmStorageAccountName: 'mkbnstorage1234'
                  backendAzureRmContainerName: 'tfstatefiles'
                  backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                  allowTelemetryCollection: false
              - task: TerraformCLI@0
                displayName: Terrafrom plan
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'terraform-aks-azurerm-svc-con'
                  commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false
              - task: TerraformCLI@0
                displayName: Terraform apply
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'terraform-aks-azurerm-svc-con'
                  commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false


